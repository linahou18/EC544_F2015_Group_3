
#include <Wire.h>

#define    LIDARLite_ADDRESS   0x62          // Default I2C Address of LIDAR-Lite.
#define    RegisterMeasure     0x00          // Register to write to initiate ranging.
#define    MeasureValue        0x04          // Value to initiate ranging.
#define    RegisterHighLowB    0x8f          // Register to get both High and Low bytes in 1 call.
#define    IRpin 0   
#include <Servo.h>

Servo myservo;
Servo wheels; // servo for turning the wheels
Servo esc; // not actually a servo, but controlled like one!
int pos = 0;         // Position of the servo (degress, [0, 180])
int distance = 0;    // Distance measured
int startupDelay = 2000; // time to pause at each calibration step
                                 // analog pin for reading the IR sensor

void setup()
{  //pinMode(3, OUTPUT);           // set pin to input
//pinMode(3, OUTPUT);
  // Serial out
 
  Serial.begin(9600);
  Serial.println("< START >");
  
  // Servo control
  myservo.attach(5);
  wheels.attach(8); // initialize wheel servo to Digital IO Pin #8
  esc.attach(9); // initialize ESC to Digital IO Pin #9
  calibrateESC();
  // LIDAR control
  Wire.begin(); // join i2c bus
}

// Get a measurement from the LIDAR Lite
int lidarGetRange(void)
{
  int val = -1;
  
  Wire.beginTransmission((int)LIDARLite_ADDRESS); // transmit to LIDAR-Lite
  Wire.write((int)RegisterMeasure); // sets register pointer to  (0x00)  
  Wire.write((int)MeasureValue); // sets register pointer to  (0x00)  
  Wire.endTransmission(); // stop transmitting

  delay(20); // Wait 20ms for transmit

  Wire.beginTransmission((int)LIDARLite_ADDRESS); // transmit to LIDAR-Lite
  Wire.write((int)RegisterHighLowB); // sets register pointer to (0x8f)
  Wire.endTransmission(); // stop transmitting

  delay(20); // Wait 20ms for transmit
  
  Wire.requestFrom((int)LIDARLite_ADDRESS, 2); // request 2 bytes from LIDAR-Lite

  if(2 <= Wire.available()) // if two bytes were received
  {
    val = Wire.read(); // receive high byte (overwrites previous reading)
    val = val << 8; // shift high byte to be high 8 bits
    val |= Wire.read(); // receive low byte as lower 8 bits
  }
  
  return val;
}

void serialPrintRange(int pos, int distance)
{
    Serial.print("Position (deg): ");
    Serial.print(pos);
    Serial.print("\t\tDistance (cm): ");
    Serial.println(distance);
}
void calibrateESC(){
    esc.write(180); // full backwards
    delay(startupDelay);
    esc.write(0); // full forwards
    delay(startupDelay);
    esc.write(90); // neutral
    delay(startupDelay);
    esc.write(90); // reset the ESC to neutral (non-moving) value
}
int measurefront()
{
  float volts = analogRead(IRpin)*0.0048828125;   // value from sensor * (5/1024) - if running 3.3.volts then change 5 to 3.3
  return 65*pow(volts, -1.10); 
}
void turn(int distance,int front)
{ if (front>50)
  {
    if(distance<30)
    wheels.write(90 + 90);
    else if(distance>35)
    wheels.write(90 - 30);
    else
    wheels.write(90);
  }
  else
   wheels.write(90 + 90);
  
}

//void switchlidar()
//{
//  
//digitalWrite(pin, HIGH);       // turn on pullup resistors
//}
void loop()
{ 
  
  for(pos = 0; pos <= 180; pos += 1)
  {
    myservo.write(pos);
    distance = lidarGetRange();
    serialPrintRange(pos, distance); 
    esc.write(70);
    turn(distance,measurefront()); 
    delay(20);
  }
  for(pos = 180; pos>=0; pos-=1)
  {
    myservo.write(pos);
    esc.write(70);
    distance = lidarGetRange();
    serialPrintRange(pos, distance);
    turn(distance,measurefront()); 
    delay(20);
  }
}
