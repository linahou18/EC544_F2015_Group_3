#include <Servo.h>

Servo wheels; // servo for turning the wheels
Servo esc; // not actually a servo, but controlled like one!
bool startup = true; // used to ensure startup only happens once
int startupDelay = 1000; // time to pause at each calibration step
double maxSpeedOffset = 45; // maximum speed magnitude, in servo 'degrees'
double maxWheelOffset = 85; // maximum wheel turn magnitude, in servo 'degrees'

//Sonar constants and variables
const int anPin = 1;
long anVolt, inches, cm;
int sum = 0; //Create sum variable so it can be averaged
int avgrange = 60; //Quantity of values to average (sample size)

void setup()
{
  wheels.attach(8); // initialize wheel servo to Digital IO Pin #8
  esc.attach(9); // initialize ESC to Digital IO Pin #9
  /*  If you're re-uploading code via USB while leaving the ESC powered on,
   *  you don't need to re-calibrate each time, and you can comment this part out.
   */
  calibrateESC();
}

/* Convert degree value to radians */
double degToRad(double degrees) {
  return (degrees * 71) / 4068;
}

/* Convert radian value to degrees */
double radToDeg(double radians) {
  return (radians * 4068) / 71;
}

/* Calibrate the ESC by sending a high signal, then a low, then middle.*/
void calibrateESC() {
  esc.write(180); // full backwards
  delay(startupDelay);
  esc.write(0); // full forwards
  delay(startupDelay);
  esc.write(90); // neutral
  delay(startupDelay);
  esc.write(90); // reset the ESC to neutral (non-moving) value
}

/* Oscillate between various servo/ESC states, using a sine wave to gradually
 *  change speed and turn values.
 */
void oscillate() {
  for (int i = 0; i < 360; i++) {
    double rad = degToRad(i);
    double speedOffset = sin(rad) * maxSpeedOffset;
    double wheelOffset = sin(rad) * maxWheelOffset;
    esc.write(90 + speedOffset);
    wheels.write(90 + wheelOffset);
    delay(50);
  }
}

void FwdAndStop() {
  long distance = readSonar();
  int i;
  if (distance >= 30) {
    for (i = 0; i < 60; i++) {
      double rad = degToRad(i);
      double speedOffset  = sin(rad) * maxSpeedOffset;
      esc.write(90 - speedOffset);
      distance = readSonar();
      delay(100);
    }
  }
  else {
    while (i >= 0) {
      i -= 3;
      double rad = degToRad(i);
      double speedOffset  = sin(rad) * maxSpeedOffset;
      esc.write(90 + speedOffset);
//      distance= readSonar();
      delay(80);
    }
  }
}
long readSonar() {
  //MaxSonar Analog reads are known to be very sensitive. See the Arduino forum for more information.
  //A simple fix is to average out a sample of n readings to get a more consistant reading.\\ 
  //Even with averaging I still find it to be less accurate than the pw method.\\ 
  //This loop gets 60 reads and averages them

  for (int i = 0; i < avgrange ; i++)
  {
    //Used to read in the analog voltage output that is being sent by the MaxSonar device.
    //Scale factor is (Vcc/512) per inch. A 5V supply yields ~9.8mV/in
    //Arduino analog pin goes from 0 to 1024, so the value has to be divided by 2 to get the actual inches
    anVolt = analogRead(anPin) / 2;
    sum += anVolt;
    delay(10);
  }
  inches = sum / avgrange;
  cm = inches * 2.54;
  Serial.print("voltage: ");
  Serial.println(anVolt);
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
  //reset sample total
  sum = 0;
  return cm;
}


void loop()
{
  FwdAndStop();
}
